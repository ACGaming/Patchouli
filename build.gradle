buildscript {
    repositories {
        maven { url 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id "com.diffplug.spotless" version "5.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "patchouli.refmap.json"
}

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

def mc_version = '1.16.2'
version = "${mc_version}-${config.build_number}"
if (System.getenv().RELEASE_MODE == null) {
    version += '-SNAPSHOT'
}

group = "vazkii.${config.mod_id}"
archivesBaseName = "${config.mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: "20200723-1.16.1"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                patchouli {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'

            mods {
                patchouli {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name "yarn2mcp"
        url "https://maven.tterrag.com/"
    }
}

repositories {
	maven {
		name = "Modmuss"
		url = "https://maven.modmuss50.me/"
	}
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-33.0.5"
    annotationProcessor 'org.spongepowered:mixin:0.8'
    annotationProcessor 'com.google.code.gson:gson:2.8.0'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:7.2'
    annotationProcessor 'org.ow2.asm:asm-commons:7.2'
    annotationProcessor 'org.ow2.asm:asm-util:7.2'

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:7.1.0.11:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:7.1.0.11")
}

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        // replace version and mcversion
        expand 'version': project.version
    }

    // copy everything else, thats not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml', '**/psd/**'
    }
}

task incrementBuildNumber {
    doFirst {
        config.build_number = (config.build_number.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    // we explicitly check in github actions builds
    java {
        indentWithTabs()
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
    }
}

pmd {
    toolVersion '6.22.0'
    incrementalAnalysis.set(true)
    ruleSets.clear()
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax {
    dependsOn spotlessJavaCheck, pmdMain
}

jar {
    manifest {
        attributes([
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "vazkii",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"vazkii",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConnector": "vazkii.patchouli.common.MixinConnector"
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    
    // exclude test data
    exclude "**/data/patchouli/patchouli_books/**"
    exclude "**/data/patchouli/advancements/**"
}

task srcJar (type: Jar) {
    from sourceSets.main.java
    classifier = 'sources'
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'vazkii/patchouli/api/**'

    classifier = 'api'
}

artifacts {
    archives srcJar, apiJar
}

publishing {
    tasks.publish.dependsOn build
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
            artifact srcJar
            artifact apiJar
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

defaultTasks 'clean', 'build'
